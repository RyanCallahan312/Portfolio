{"version":3,"sources":["webpack://dev-ryan-portfolio/./src/constants/projectMappings.ts","webpack://dev-ryan-portfolio/./src/components/ProjectCard/projectCard.tsx","webpack://dev-ryan-portfolio/./src/components/projectsPage/topProjects.tsx","webpack://dev-ryan-portfolio/./src/pages/projects.tsx"],"names":["projectMappings","name","description","base","displayTags","hiddenTags","github","demo","isPronounced","icons","image","projectInfo","find","e","isDesktopOrLaptop","useMediaQuery","minDeviceWidth","className","style","transform","margin","G","key","getImage","alt","width","height","borderRadius","join","href","target","src","allFile","nodes","element","publicURL","cursor","opacity","images","useStaticQuery","map","index","childImageSharp","data","console","log","title"],"mappings":"gOAWaA,EAAuC,CACnD,CACCC,KAAM,oBACNC,YAAY,iKACZC,KAAM,6BACNC,YAAa,CAAC,QAAS,UAAW,aAClCC,WAAY,CAAC,QAAS,QAAS,QAC/BC,OAAQ,uDACRC,KAAM,wCAEP,CACCN,KAAM,oBACNC,YAAY,uLACZC,KAAM,4BACNC,YAAa,CAAC,QAAS,SAAU,SACjCC,WAAY,CACX,SACA,QACA,QACA,QACA,QACA,eACA,SACA,cAEDC,OAAQ,sCACRE,cAAc,GAEf,CACCP,KAAM,gBACNC,YAAY,oLACZC,KAAM,oBACNC,YAAa,CAAC,QAAS,UAAW,aAClCC,WAAY,CAAC,QAAS,QACtBC,OAAQ,8CACRC,KAAM,iD,UC0DR,EAzFqC,SAAC,GAAmC,IAAjCE,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOP,EAAkB,EAAlBA,KACjDQ,EAA4BX,EAAgBY,MAC/C,SAACC,GAAD,OAAOA,EAAEV,OAASA,KAGbW,GAAoBC,mBAAc,CAAEC,eAAgB,OAE1D,OACC,uBACCC,UAAU,iBACVC,MACCP,EAAYH,cAAgBM,EACzB,CACAK,UAAW,aACXC,OAAQ,QAER,IAEJ,uBAAKH,UAAU,cACd,gBAAC,EAAAI,EAAD,CACCC,IAAKX,EAAYT,YACjBQ,OAAOa,OAASb,GAChBc,IAAKb,EAAYT,YACjBgB,MAAO,CACNO,MAAO,OACPC,OAAQ,OACRC,aAAc,sBAIjB,uBAAKV,UAAU,aACd,uBAAKA,UAAU,wBACd,sBAAIA,UAAU,cAAcN,EAAYV,MACxC,sBAAIgB,UAAU,aACZN,EAAYP,YAAYwB,KAAK,OAGhC,uBAAKX,UAAU,8BACd,qBAAGA,UAAU,oBACXN,EAAYT,eAIhB,uBAAKe,UAAU,qBACd,qBACCA,UAAU,WACVY,KAAMlB,EAAYL,OAClBwB,OAAO,UACP,uBACCL,MAAM,OACNM,IACCtB,EAAMuB,QAAQC,MAAMrB,MACnB,SAACsB,GAAD,MAA8B,cAAjBA,EAAQjC,QACpBkC,UAEHlB,UAAU,YACVO,IAAI,sBAGN,qBACCP,UAAU,WACVY,KAAMlB,EAAYJ,KAClBuB,OAAO,UACP,uBACCL,MAAM,OACNM,IACCtB,EAAMuB,QAAQC,MAAMrB,MAAK,SAACsB,GAAD,OACxBvB,EAAYJ,KACQ,cAAjB2B,EAAQjC,KACS,iBAAjBiC,EAAQjC,QACVkC,UAEHjB,MACCP,EAAYJ,KACT,GACA,CACA6B,OAAQ,UACRC,QAAS,IAGbpB,UAAU,YACVO,IAAI,0BC1CV,EAlCqC,SAAC,GAAa,IAAZf,EAAW,EAAXA,MAmBhC6B,GAlB0BC,oBAAe,cAkBZP,QAAQC,MAAMO,KAChD,SAAC3B,EAAwD4B,GACxD,OACC,gBAAC,EAAD,CACgBhC,MAAOA,EACtBC,OAAOa,OAASV,EAAE6B,iBACHvC,KAAMU,EAAEV,KACRmB,IAAKT,EAAEV,UAK1B,OAAO,uBAAKc,UAAU,0BAA0BqB,ICxBjD,EAfkC,SAAC,GAAY,IAAXK,EAAU,EAAVA,KAEnC,OADAC,QAAQC,IAAIF,GAEX,gBAAC,IAAD,KACC,gBAAC,IAAD,CAAKG,MAAM,aACX,uBAAK7B,UAAU,2BACd,uBAAKA,UAAU,2BACd,sBAAIA,UAAU,mBAAd,sBAED,gBAAC,EAAD,CAAaR,MAAOkC","file":"component---src-pages-projects-tsx-67ea6a437dd587478e6b.js","sourcesContent":["export interface IProjectInfo {\r\n\tname: string;\r\n\tdescription: string;\r\n\tbase: string;\r\n\tdisplayTags: Array<string>;\r\n\thiddenTags: Array<string>;\r\n\tgithub: string;\r\n\tdemo?: string;\r\n\tisPronounced?: boolean;\r\n}\r\n\r\nexport const projectMappings: Array<IProjectInfo> = [\r\n\t{\r\n\t\tname: 'Losing The Lyrics',\r\n\t\tdescription: `A web based jackbox style game inspired by the 2007 tv show 'Don't Forget The Lyrics'. Powered by React with Next.js, Socket.io, and Spotify Web Playback SDK.`,\r\n\t\tbase: 'losing-the-lyrics-proj.png',\r\n\t\tdisplayTags: ['React', 'Next.js', 'Socket.io'],\r\n\t\thiddenTags: ['react', 'redux', 'node'],\r\n\t\tgithub: 'https://github.com/RyanCallahan312/losing-the-lyrics',\r\n\t\tdemo: 'http://losing-the-lyrics.devryan.io/',\r\n\t},\r\n\t{\r\n\t\tname: 'Highlight-intator',\r\n\t\tdescription: `A web app to automatically create short highlight videos from Twitch live stream vods. Targeted at small streamers to help grow thier audience. (demo disabled due to hosting costs)`,\r\n\t\tbase: 'highlight-inator-proj.png',\r\n\t\tdisplayTags: ['.NET5', 'FFMPEG', 'React'],\r\n\t\thiddenTags: [\r\n\t\t\t'dotnet',\r\n\t\t\t'react',\r\n\t\t\t'redux',\r\n\t\t\t'linux',\r\n\t\t\t'azure',\r\n\t\t\t'microservice',\r\n\t\t\t'docker',\r\n\t\t\t'postgresql',\r\n\t\t],\r\n\t\tgithub: 'https://github.com/auto-highlighter',\r\n\t\tisPronounced: true,\r\n\t},\r\n\t{\r\n\t\tname: 'Chat App Demo',\r\n\t\tdescription: `A chat app designed as a code-along for a 40 minute computer science club demo. Powered by React with Next.js and Socket.io this lets anyone send messages to a global chat room!`,\r\n\t\tbase: 'chat-app-proj.png',\r\n\t\tdisplayTags: ['React', 'Next.js', 'Socket.io'],\r\n\t\thiddenTags: ['react', 'node'],\r\n\t\tgithub: 'https://github.com/RyanCallahan312/chat-app',\r\n\t\tdemo: 'http://chat-room.bsucomputerscienceclub.com/',\r\n\t},\r\n];\r\n","import * as React from 'react';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport { IProjectInfo, projectMappings } from '@constants/projectMappings';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport {Icons} from '@types'\r\n\r\nimport '@styles/projectCard.css';\r\n\r\ninterface Props {\r\n\timage: IGatsbyImageData;\r\n\tbase: string;\r\n\ticons: Icons;\r\n}\r\n\r\nconst ProjectCard: React.FC<Props> = ({ icons, image, base }: Props) => {\r\n\tlet projectInfo: IProjectInfo = projectMappings.find(\r\n\t\t(e) => e.base === base,\r\n\t);\r\n\r\n\tconst isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1424 });\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='card-container'\r\n\t\t\tstyle={\r\n\t\t\t\tprojectInfo.isPronounced && isDesktopOrLaptop\r\n\t\t\t\t\t? {\r\n\t\t\t\t\t\t\ttransform: 'scale(1.1)',\r\n\t\t\t\t\t\t\tmargin: '20px',\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t: {}\r\n\t\t\t}>\r\n\t\t\t<div className='card-image'>\r\n\t\t\t\t<GatsbyImage\r\n\t\t\t\t\tkey={projectInfo.description}\r\n\t\t\t\t\timage={getImage(image)}\r\n\t\t\t\t\talt={projectInfo.description}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\theight: '100%',\r\n\t\t\t\t\t\tborderRadius: '9px 9px 0px 0px',\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className='card-text'>\r\n\t\t\t\t<div className='card-title-with-tags'>\r\n\t\t\t\t\t<h1 className='card-title'>{projectInfo.name}</h1>\r\n\t\t\t\t\t<h1 className='card-tags'>\r\n\t\t\t\t\t\t{projectInfo.displayTags.join(',')}\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='card-description-container'>\r\n\t\t\t\t\t<p className='card-description'>\r\n\t\t\t\t\t\t{projectInfo.description}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='demo-github-links'>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='git-link'\r\n\t\t\t\t\thref={projectInfo.github}\r\n\t\t\t\t\ttarget='_blank'>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\twidth='30px'\r\n\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\ticons.allFile.nodes.find(\r\n\t\t\t\t\t\t\t\t(element) => element.name === 'git-white',\r\n\t\t\t\t\t\t\t).publicURL\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclassName=\"demo-icon\"\r\n\t\t\t\t\t\talt='github repo link'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='eye-link'\r\n\t\t\t\t\thref={projectInfo.demo}\r\n\t\t\t\t\ttarget='_blank'>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\twidth='30px'\r\n\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\ticons.allFile.nodes.find((element) =>\r\n\t\t\t\t\t\t\t\tprojectInfo.demo\r\n\t\t\t\t\t\t\t\t\t? element.name === 'eye-white'\r\n\t\t\t\t\t\t\t\t\t: element.name === 'no-eye-white',\r\n\t\t\t\t\t\t\t).publicURL\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstyle={\r\n\t\t\t\t\t\t\tprojectInfo.demo\r\n\t\t\t\t\t\t\t\t? {}\r\n\t\t\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\t\t\tcursor: 'default',\r\n\t\t\t\t\t\t\t\t\t\topacity: 0.5,\r\n\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclassName=\"demo-icon\"\r\n\t\t\t\t\t\talt='project demo link'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProjectCard;\r\n","import * as React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport ProjectCard from '@components/ProjectCard/projectCard';\r\n\r\nimport {Icons} from '@types'\r\nimport '@styles/topProjects.css';\r\n\r\ninterface TopProjectsImages {\r\n\tallFile: {\r\n\t\tnodes: [{ childImageSharp: IGatsbyImageData; base: string }];\r\n\t};\r\n}\r\n\r\n\r\ninterface Props {\r\n\ticons: Icons\r\n}\r\n\r\n\r\nconst TopProjects: React.FC<Props> = ({icons}) => {\r\n\tconst data: TopProjectsImages = useStaticQuery(graphql`\r\n    {\r\n        allFile(\r\n        filter: {relativeDirectory: {eq: \"projects\"}, base: {in: [\"chat-app-proj.png\", \"highlight-inator-proj.png\", \"losing-the-lyrics-proj.png\"]}}\r\n        ) {\r\n            nodes {\r\n                childImageSharp {\r\n                    gatsbyImageData(\r\n                        placeholder: BLURRED\r\n                        formats: [AUTO, WEBP, AVIF]\r\n                    )\r\n                }\r\n                base\r\n            }\r\n        }\r\n    }\r\n    `);\r\n\r\n\tconst images: JSX.Element[] = data.allFile.nodes.map(\r\n\t\t(e: { childImageSharp: IGatsbyImageData; base: string }, index: number) => {\r\n\t\t\treturn (\r\n\t\t\t\t<ProjectCard\r\n                    icons={icons}\r\n\t\t\t\t\timage={getImage(e.childImageSharp)}\r\n                    base={e.base}\r\n                    key={e.base}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t},\r\n\t);\r\n\treturn <div className='top-projects-container'>{images}</div>;\r\n};\r\n\r\nexport default TopProjects;\r\n","import * as React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Layout from '@components/common/defaultLayout';\r\nimport SEO from '@components/common/seo';\r\nimport TopProjects from '@components/projectsPage/topProjects';\r\nimport '@styles/projects.css';\r\nimport {Icons} from '@types'\r\n\r\ninterface Props{\r\n\tdata: Icons\r\n}\r\nconst Projects: React.FC<Props> = ({data}) => {\r\n\tconsole.log(data)\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<SEO title='Projects' />\r\n\t\t\t<div className='headline-grid-container'>\r\n\t\t\t\t<div className='headline-text-container'>\r\n\t\t\t\t\t<h1 className='projects-header'>Featured Projects</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<TopProjects icons={data}/>\r\n\t\t\t</div>\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport default Projects;\r\n\r\nexport const query = graphql`\r\n{\r\n\tallFile(\r\n\t\tfilter: {relativeDirectory: {eq: \"icons\"}, name: {in: [\"eye-white\", \"git-white\", \"no-eye-white\"]}}\r\n\t) {\r\n\t\tnodes {\r\n\t\t\tpublicURL\r\n\t\t\tname\r\n\t\t}\r\n\t}\r\n}\r\n`;\r\n"],"sourceRoot":""}